/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void lst_port_click(GDropList source, GEvent event) { //_CODE_:lst_ports:443940:
  println("lst_ports - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:lst_ports:443940:

public void btn_connect_click(GButton source, GEvent event) { //_CODE_:btn_connect:480363:
  println("btn_connect - GButton >> GEvent." + event + " @ " + millis());
  connectArduino();
} //_CODE_:btn_connect:480363:

public void fld_duration_change(GTextField source, GEvent event) { //_CODE_:fld_duration:877553:
  println("fld_duration - GTextField >> GEvent." + event + " @ " + millis());
  vibrDuration = Integer.parseInt(fld_duration.getText());
  println(vibrDuration);
} //_CODE_:fld_duration:877553:

public void fld_exp_interval_change(GTextField source, GEvent event) { //_CODE_:fld_exp_interval:689726:
  println("fld_exp_interval - GTextField >> GEvent." + event + " @ " + millis());
  expInterval = Integer.parseInt(fld_exp_interval.getText());
  println(expInterval);
} //_CODE_:fld_exp_interval:689726:

public void btn_start_click(GButton source, GEvent event) { //_CODE_:btn_start:434169:
  println("btn_start - GButton >> GEvent." + event + " @ " + millis());
  thread("runExperiment");
} //_CODE_:btn_start:434169:

public void btn_stop_click(GButton source, GEvent event) { //_CODE_:btn_stop:511367:
  println("btn_stop - GButton >> GEvent." + event + " @ " + millis());
  expCancelled = true; 
} //_CODE_:btn_stop:511367:

public void btn_20hz_click(GButton source, GEvent event) { //_CODE_:btn_20hz:859344:
  println("btn_20hz - GButton >> GEvent." + event + " @ " + millis());
  
  if(!vibrMotorBusy){
    vibrFreq = 20;
    thread("vibrate");
  } else {
    println("Busy!");
  }
} //_CODE_:btn_20hz:859344:

public void btn_36hz_click(GButton source, GEvent event) { //_CODE_:btn_36hz:783274:
  println("btn_36hz - GButton >> GEvent." + event + " @ " + millis());
  if(!vibrMotorBusy){
    vibrFreq = 36;
    thread("vibrate");
  } else {
    println("Busy!");
  }
} //_CODE_:btn_36hz:783274:

public void btn_44hz_click(GButton source, GEvent event) { //_CODE_:btn_44hz:741875:
  println("btn_44hz - GButton >> GEvent." + event + " @ " + millis());
  if(!vibrMotorBusy){
    vibrFreq = 44;
    thread("vibrate");
  } else {
    println("Busy!");
  }
} //_CODE_:btn_44hz:741875:

public void btn_80hz_click(GButton source, GEvent event) { //_CODE_:btn_80hz:680223:
  println("btn_80hz - GButton >> GEvent." + event + " @ " + millis());
  if(!vibrMotorBusy){
    vibrFreq = 80;
    thread("vibrate");
  } else {
    println("Busy!");
  }
} //_CODE_:btn_80hz:680223:

public void ta_log_change(GTextArea source, GEvent event) { //_CODE_:ta_log:664676:
  println("ta_log - GTextArea >> GEvent." + event + " @ " + millis());
} //_CODE_:ta_log:664676:

public void fld_freqs_change(GTextField source, GEvent event) { //_CODE_:fld_freqs:620910:
  println("fld_freqs - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:fld_freqs:620910:

public void btn_data_folder_click(GButton source, GEvent event) { //_CODE_:btn_data_folder:625168:
  println("btn_data_folder - GButton >> GEvent." + event + " @ " + millis());
  thread("openDataFolder");
} //_CODE_:btn_data_folder:625168:

public void btn_update_click(GButton source, GEvent event) { //_CODE_:btn_update:312087:
  println("btn_update - GButton >> GEvent." + event + " @ " + millis());
  lst_ports.setItems(Arduino.list(),0);
} //_CODE_:btn_update:312087:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  lbl_port = new GLabel(this, 40, 40, 50, 30);
  lbl_port.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_port.setText("port");
  lbl_port.setOpaque(false);
  lst_ports = new GDropList(this, 90, 40, 210, 120, 3, 10);
  lst_ports.setItems(loadStrings("list_443940"), 0);
  lst_ports.addEventHandler(this, "lst_port_click");
  lbl_status = new GLabel(this, 410, 40, 130, 30);
  lbl_status.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_status.setText("Status");
  lbl_status.setOpaque(false);
  btn_connect = new GButton(this, 431, 80, 80, 30);
  btn_connect.setText("Connect");
  btn_connect.addEventHandler(this, "btn_connect_click");
  lbl_duration = new GLabel(this, 40, 90, 100, 30);
  lbl_duration.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_duration.setText("duration (ms):");
  lbl_duration.setOpaque(false);
  fld_duration = new GTextField(this, 140, 90, 120, 30, G4P.SCROLLBARS_NONE);
  fld_duration.setOpaque(true);
  fld_duration.addEventHandler(this, "fld_duration_change");
  lbl_exp_interval = new GLabel(this, 40, 140, 150, 30);
  lbl_exp_interval.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_exp_interval.setText("Experiments interval (ms):");
  lbl_exp_interval.setOpaque(false);
  fld_exp_interval = new GTextField(this, 190, 140, 120, 30, G4P.SCROLLBARS_NONE);
  fld_exp_interval.setText("2000");
  fld_exp_interval.setOpaque(true);
  fld_exp_interval.addEventHandler(this, "fld_exp_interval_change");
  btn_start = new GButton(this, 40, 350, 80, 30);
  btn_start.setText("Start");
  btn_start.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  btn_start.addEventHandler(this, "btn_start_click");
  btn_stop = new GButton(this, 150, 350, 80, 30);
  btn_stop.setText("Stop");
  btn_stop.setLocalColorScheme(GCScheme.RED_SCHEME);
  btn_stop.addEventHandler(this, "btn_stop_click");
  btn_20hz = new GButton(this, 360, 290, 80, 30);
  btn_20hz.setText("20Hz");
  btn_20hz.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  btn_20hz.addEventHandler(this, "btn_20hz_click");
  btn_36hz = new GButton(this, 470, 290, 80, 30);
  btn_36hz.setText("36Hz");
  btn_36hz.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  btn_36hz.addEventHandler(this, "btn_36hz_click");
  btn_44hz = new GButton(this, 360, 350, 80, 30);
  btn_44hz.setText("44Hz");
  btn_44hz.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  btn_44hz.addEventHandler(this, "btn_44hz_click");
  btn_80hz = new GButton(this, 470, 350, 80, 30);
  btn_80hz.setText("80Hz");
  btn_80hz.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  btn_80hz.addEventHandler(this, "btn_80hz_click");
  ta_log = new GTextArea(this, 570, 10, 220, 330, G4P.SCROLLBARS_VERTICAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  ta_log.setOpaque(true);
  ta_log.addEventHandler(this, "ta_log_change");
  lbl_freqlist = new GLabel(this, 40, 190, 80, 30);
  lbl_freqlist.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lbl_freqlist.setText("Freq. List:");
  lbl_freqlist.setOpaque(false);
  fld_freqs = new GTextField(this, 110, 190, 450, 40, G4P.SCROLLBARS_HORIZONTAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  fld_freqs.setOpaque(true);
  fld_freqs.addEventHandler(this, "fld_freqs_change");
  btn_data_folder = new GButton(this, 570, 350, 170, 30);
  btn_data_folder.setText("Open data folder");
  btn_data_folder.addEventHandler(this, "btn_data_folder_click");
  btn_update = new GButton(this, 306, 39, 80, 30);
  btn_update.setText("update");
  btn_update.addEventHandler(this, "btn_update_click");
}

// Variable declarations 
// autogenerated do not edit
GLabel lbl_port; 
GDropList lst_ports; 
GLabel lbl_status; 
GButton btn_connect; 
GLabel lbl_duration; 
GTextField fld_duration; 
GLabel lbl_exp_interval; 
GTextField fld_exp_interval; 
GButton btn_start; 
GButton btn_stop; 
GButton btn_20hz; 
GButton btn_36hz; 
GButton btn_44hz; 
GButton btn_80hz; 
GTextArea ta_log; 
GLabel lbl_freqlist; 
GTextField fld_freqs; 
GButton btn_data_folder; 
GButton btn_update; 
